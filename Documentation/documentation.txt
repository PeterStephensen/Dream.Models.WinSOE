---------------------------------------------------------------------------------
DOCUMENTATION
---------------------------------------------------------------------------------
WaGP:	'With a Given Probability'
(...)	Info of action in other object


---------------------------------------------------------------------------------
Simulation
---------------------------------------------------------------------------------
Constructor:
	Sets random seed
	Sets up the agent tree structure
	Fire event Event.System.Start

Event.System.Start:
	Runs the Event-Pump:
		Event.System.PeriodStart
		Event.Economics.Update
		Event.Economics.Shopping..Event.Economics.Shopping (4 times)
		Event.System.PeriodEnd
		RandomizeAgents()

Event.System.PeriodEnd:
		Add new households
        Add new firms: _investor.Invest();


---------------------------------------------------------------------------------
Firms
---------------------------------------------------------------------------------
Constructor:
	Productivity is drawn from Pareto distribution

Event.System.PeriodStart:	
	_l_primo = CalcEmployment(); // Primo employment
	_s_primo = _sales;

	Expectations();
	Produce();
	Management();
	Marketing();
	HumanResource();

	Initializations..
	
Event.Economics.Update:	
	WaGP: Default if negativ profit (and age > FirmStartupPeriod). If default:
		Send EStatistics.FirmCloseZeroEmployment to Statistics	
		(In Statistics: Add firm to _firmInfo)
	WaGP: Default for no reason (prob=0). If default:
		Send EStatistics.FirmCloseNatural to Statistics
		(In Statistics: Add firm to _firmInfo)
	
Event.System.PeriodEnd:
	(New firms are created in Simulation by Investor)
	Calculate profit and: 
		Send EStatistics.Profit to Statistics
		(In Statistics: Add firm to _firmInfo)
	age++

Internal methods:
-----------------
Expectations()
	Exponensial smoothing
	
Produce()
	Calculate _y_primo
	Calculate _stock
	
Management()
	Calculate _l_optimal
	Calculate _y_optimal
	Calculate _profit_optimal

Marketing()
	WaGP: Prices are recalculated as follows:
		if(_expPotentialSales < _y_optimal * FirmExpectedSalesFraction):
			Set p_target lower than marketPrice (if age < 5 years: advertise)
		else
			Set p_target higher than marketPrice
		Gradual adjustment: _p = a * _p + (1 - a) * p_target
		Idea: It is obvious that a should be chosen through a social process (exchange of experiences)
		Note: FirmExpectedSalesFraction < 1. The firm deliberately chooses _y_optimal > _expPotentialSales so that
		the _stock builds up when demand fluctuates

HumanResource()
	If(_l_markup * _l_optimal < l):
		Layoffs
	Observe _l_markup > 1. The firm deliberately chooses to hire too many
	_vacancies = _l_markup * _l_optimal - l + _expQuitters;
	If _vacancies > 0 hire by responding to ECommunicate.JobApplication
	if(_expEmployment >_l_optimal)
		set w_target lower than marketWage
	else
		set w_target higher than marketWage (if age < 5 years: advertise)
	Gradual adjustment: _w = a * _w + (1 - a) * w_target
	
AdvertiseGood()
	Advertise current price to random sample of households

AdvertiseJob()
	Advertise current wage to random sample of households

----------
Communicate()
	ECommunicate.JobApplication:
		_jobApplications++
		if _vacancies > 0: hire
			Count down _vacancies
		
	ECommunicate.IQuit:
		_jobQuitters++
		Remove worker
		
	ECommunicate.Death:
		As IQuit + add to _wageSavedDeath
		
	ECommunicate.CanIBuy:
		Add to _potentialSales
		If possible add to _sales
		Use from _stock if necessary
	

---------------------------------------------------------------------------------
Households
---------------------------------------------------------------------------------
Constructor:
	_productivity = 1.0;
    _age = _settings.HouseholdStartAge;

Event.Economics.Update:	
	_income = _w * _productivity;
	Calculate _expected_income
	Calculate _expected_consumption
	Calculate _consumption_budget by running BufferStock(), BehavioralSavings() or FixedSavingsRate() (Chosen household theory)
	Make sure _wealth>=0 (No credit!)
	
	if(_age == _settings.HouseholdPensionAge): 
		Quit job
	
	if(_age < _settings.HouseholdPensionAge):
		if(unemployed):
			SearchJob()
		else:
		{
			WaGP: SearchJob()  // On-the-job-search
			WaGP: Quit job     // Relocation or the like. Most important source of unemployment
				_w_reservation = _w
		}
	
	WaGP: SearchGood()
	MakeBudget()

Event.Economics.Shopping:      // n shoppings every month (n=4)	
	BuyFromShops()             // Try to buy _consumption_budget/n from shops
	if(_nShopping==n)          // Last shopping in the period    
	{
		Calculate _consumption_value  
			If _consumption_value < _consumption_budget: Did not manage to use the entire budget => Product shortage 
		WaGP: Death
		{
			if(employed): 
				Quit job
			Inheritance();
			RemoveThisAgent();		
		}
	}
	_nShoppings++

Event.System.PeriodEnd:
	_productivity = _productivity * LogNormalError 	
	if (_fired) _fired = false   // Reset fired status
	if(unemployed)
		_w_reservation decreased and corrected for expected inflation 
	age++

Internal methods:
-----------------
BufferStock() : See note
BehavioralSavings() : See note
FixedSavingsRate() : See note

SearchJob()
	if(unemployed)
		w_res = _w_reservation
	else
		w_res = current wage

	Get sample of firms:
		firms = GetRandomFirmsFromEmployedHouseholds(n_search)  // Network-effect: Firms with many employees are more likely to be known
	Sort firms by wage 
	Apply one firm at a time (decreasing wage) until maybe there is a vacancy


SearchGood(sector)
	Get sample of firms:
		firms = GetRandomFirmsFromHouseholdsGood(n_search)  // Network-effect: Firms with many custumers are more likely to be known
	Sort firms by price
	Choose the firm with the lowest price

MakeBudget()

BuyFromShops()

BuyFromShop()

Inheritance()
	inheritance = _wealth / _settings.NumberOfInheritors
	distributed to n randomly selected households between 35 and 60 years of age (n=5)


---------------------------------------------------------------------------------
Statistics
---------------------------------------------------------------------------------
FirmInfo-class. Members: Age, Sector, Profit 

Event.System.PeriodStart:
	Calculate _totalProfit from _firmInfo's
	investor.CalculateSharpeRatiosAndInterestRate()
	Calculate _expectedInterestRate
	Calculate _expectedInflation
	Calculate _expectedRealwageInflation
	Calculate _expectedRealInterestRate
	Initialize _firmInfo

Event.System.PeriodEnd:
	Calculates _stock, _employment, _sales, _marketWage, _marketPrice
	Calculates _totalSales, _totalPotensialSales, _totalEmployment, _totalProduction
	Calculates _n_laborSupply, _laborSupplyProductivity, _n_unemployed
	Calculates _wealth, _wageMedian, _priceMedian, _marketPriceTotal, _inflation, _realInterestRate
	Graphics and chart data
	Shocks: EShock.Productivity, EShock.ProductivityAR1, EShock.ProductivitySector0
	Writing output files

Communicate(): Measuring flows by receiving EStatistics-elements
 EStatistics.FirmCloseTooBig                        -> _nFirmCloseTooBig++;         _firmInfo.Add(new FirmInfo(f));
 EStatistics.FirmCloseNegativeProfit                -> _nFirmCloseNegativeProfit++; _firmInfo.Add(new FirmInfo(f));
 EStatistics.FirmCloseZeroEmployment                -> _nFirmCloseZeroEmployment++; _firmInfo.Add(new FirmInfo(f));
 EStatistics.Profit                                 ->                              _firmInfo.Add(new FirmInfo(f));
 EStatistics.FirmNew                                -> _nFirmNew
 EStatistics.CouldNotFindSupplier                   -> _n_couldNotFindSupplier 
 EStatistics.ChangeShopInSearchForShop              -> _nChangeShopInSearchForShop
 EStatistics.ChangeShopInBuyFromShopNull            -> _nChangeShopInBuyFromShopNull
 EStatistics.ChangeShopInBuyFromShopLookingForGoods -> _nChangeShopInBuyFromShopLookingForGoods
 EStatistics.CouldNotFindFirmWithGoods              -> _nCouldNotFindFirmWithGoods
 EStatistics.BuyFromShop                            -> _nBuyFromShop
 EStatistics.SuccesfullTrade                        -> _nSuccesfullTrade
 EStatistics.ZeroBudget                             -> _nZeroBudget
 EStatistics.SuccesfullTradeNonZero                 -> _nSuccesfullTradeNonZero
 EStatistics.JobFromUnemployment                    -> _nJobFromUnemployment
 EStatistics.JobFromJob                             -> _nFromJob
 EStatistics.JobFromUnemploymentAdvertise           -> _nFromUnemploymentAdvertise
 EStatistics.JobFromJobAdvertise                    -> _nFromJobAdvertise
 EStatistics.Inheritance                            -> _inheritence


---------------------------------------------------------------------------------
Investor
---------------------------------------------------------------------------------
Methods:
    CalculateSharpeRatiosAndInterestRate(): Run under Event.System.PeriodStart in Statistics
	Invest():                               Run under Event.System.PeriodEnd   in Simulation













	

























